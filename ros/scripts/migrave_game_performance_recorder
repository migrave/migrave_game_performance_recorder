#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import rospy
from std_msgs.msg import Bool
from datetime import datetime
from migrave_ros_msgs.msg import GamePerformance

from game_performance_recorder.game_performance_recorder import GamePerformanceRecorder


class GamePerformanceCapture:
    def __init__(
        self,
        is_record_topic,
        game_performance_topic,
        out_directory,
    ):

        self._game_performance_recorder = GamePerformanceRecorder(
            out_directory=out_directory,
        )

        self._is_record_subscriber = rospy.Subscriber(
            is_record_topic, Bool, self._is_record_callback
        )
        self._game_performance_subscriber = rospy.Subscriber(
            game_performance_topic, GamePerformance, self._game_performance_callback
        )

        # This flag is used to block recording if memory exceeeds limits
        self._allow_recording = True  # TODO add a memory usage watch topic

    def _game_performance_callback(self, performance_msg):
        game_performance = {}
        game_performance["time"] = {
            "secs": performance_msg.stamp.secs,
            "nsecs": performance_msg.stamp.nsecs,
        }
        game_performance["person"] = {
            "name": performance_msg.person.name,
            "age": performance_msg.person.age,
            "gender": performance_msg.person.gender,
            "mother_tongue": performance_msg.person.mother_tongue,
        }
        game_performance["game_activity"] = {
            "game_id": performance_msg.game_activity.game_id,
            "game_activity_id": performance_msg.game_activity.game_activity_id,
            "difficulty_level": performance_msg.game_activity.difficulty_level,
        }
        game_performance["answer_correctness"] = performance_msg.answer_correctness

        self._game_performance_recorder.add_game_performance(
            game_performance, is_throw_error_if_not_recording=False
        )

    def _is_record_callback(self, data):

        is_record = data.data
        try:
            if is_record:
                if self._allow_recording:
                    # rospy.loginfo("Starting to record video")
                    ext = "csv"
                    now = datetime.now()
                    # time in YYYY-MM-DD_HH_MM-SS format
                    time = now.strftime("%Y-%m-%d_%H-%M-%S")
                    # unixtimestamp 16 digits
                    stamp = int(datetime.timestamp(now) * 1000000)
                    file_name = f"{time}_{stamp}"
                    out_file_name = f"game_performance_{file_name}.{ext}"
                    rospy.loginfo("Starting to record game_performance data")
                    self._game_performance_recorder.start_recording(
                        out_file_name=out_file_name)
                else:
                    rospy.logerr(
                        "Recording will not happen " "due to memory limits exceeded"
                    )
            else:
                if self._game_performance_recorder._is_recording:
                    rospy.loginfo("Stopped recording skeleton data")
                    self._game_performance_recorder.stop_recording()

        except RuntimeError as e:
            rospy.logerr(e)


if __name__ == "__main__":
    # default parameters
    rospy.init_node("migrave_game_performance_recorder", anonymous=True)
    game_performance_topic = "/migrave/game_performance"
    is_record_topic = "/migrave_data_recording/is_record"
    output_directory = "/home/qtrobot/Documents/migrave"
    # update parameter if provided by ros parameter server
    if rospy.has_param('~is_record_topic'):
        is_record_topic = rospy.get_param('~is_record_topic')

    GamePerformanceCapture(
        game_performance_topic=game_performance_topic,
        is_record_topic=is_record_topic,
        out_directory=output_directory,
    )

    rospy.spin()
